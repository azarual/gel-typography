/*------------------------------------*\
    #MQ
\*------------------------------------*/

/**
 * GEL responsive guidelines redefines a number of a major breakpoints which
 * we work to. These are given non-device specific names for referance
 */
$gel-breakpoints: (
    (compact 240px)
    (small   400px)
    (medium  600px)
    (wide    900px)
) !default;

$gel-responsive: true !default;
$gel-fixed-width: null !default;

/**
 * Using our list of breakpoints we want to retrive the width for
 * the specified name
 */
@function get-breakpoint-width($name) {
    @each $breakpoint in $gel-breakpoints {
        $breakpoint-name: nth($breakpoint, 1);
        $breakpoint-width: nth($breakpoint, 2);

        @if $name == $breakpoint-name {
            @return $breakpoint-width;
        }
    }
    @return 'Breakpoint #{$name} does not exist';
}

/**
 * Convert pixels to ems
 *
 * (pixels / base-font) = em
 */
@function pem($px, $base: $gel-base-font-size) {

    @if ($px == nil) {
        @warn "No value supplied to be converted";
        @return nil;
    }

    @if (unitless($px)) {
        @warn "Assuming #{$px} to be in pixels, attempting to convert it into pixels for you";
        $px: $px + 0px;
    }

    @if (unitless($base)) {
        @warn "Assuming #{$base} to be in pixels, attempting to convert it into pixels for you";
        $base: $base + 0px;
    }

    @return ($px / $base) * 1em;

}

/**
 * The `mq` mixin provides a robust way of generating inline media queries
 * you can pass either breakpoint names or specific values into the mixin
 *
 * You can supply either pixel values:
 *
        @include mq($from: 600px) { ... };
 *
 * or give a breakpoint name:
 *
        @include mq($from: medium) { ... };
 *
 * To and from media queries can be included:
 *
        @include mq($from: medium, $to: wide) { ... };
 *
 * It is also possible to pass through a third additional custom directives
 * such as orientation. E.g:
 *
        @include mq($from: medium, $and: '(orientation: landscape)') { ... };
 *
 * These media query mixin is based on the work of @kaelig and the Guardian:
 * https://github.com/guardian/sass-mq
 */
@mixin mq($from: false, $to: false, $and: false) {

    $min-width: 0;
    $max-width: 0;
    $mq-base-font-size: 16px;
    $media-query: '';

    // From: this breakpoint (inclusive)
    @if $from {
        @if (type-of($from) == number) {
            $min-width: pem($from, $mq-base-font-size);
        } @else {
            $min-width: pem(get-breakpoint-width($from), $mq-base-font-size);
        }
    }

    // To: that breakpoint (exclusive)
    //
    // We need to minus .01em to prevent 'double breakpoints':
    // http://http://tzi.fr/css/responsive/prevent-double-breakpoint
    @if $to {
        @if (type-of($to) == number) {
            $max-width: pem($to, $mq-base-font-size);
        } @else {
            $max-width: pem(get-breakpoint-width($to), $mq-base-font-size);
        }

        $max-width: $max-width - .01em;
    }

    // Do want to render the responsive styles or just the base styles
    @if ($gel-responsive == true) {
        // If we're serving a fixed width we need to output styles outside @media blocks
        @if (type-of($gel-fixed-width) == number) {
            $target-width: pem($fixed-width, $mq-base-font-size);

            // Output only rules that start at or span our target width
            @if ($and == false and ($min-width <= $target-width) and (($to == false) or ($max-width >= $target-width))) {
                @content;
            }
        } @else {
            // Construct the media query
            @if $min-width != 0 { $media-query: '#{$media-query} and (min-width: #{$min-width})'; }
            @if $max-width != 0 { $media-query: '#{$media-query} and (max-width: #{$max-width})'; }
            @if $and            { $media-query: '#{$media-query} and #{$and}'; }

            $media-query: unquote(#{$media-query});

            @media screen #{$media-query} {
                @content;
            }
        }
    }
}
